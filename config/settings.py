"""
Django settings for peakdown project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta

# .env 파일 로드
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is required")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# 환경 감지
IS_PRODUCTION = os.getenv('ENVIRONMENT') == 'production' or not DEBUG
IS_CLOUDTYPE = bool(os.getenv('CLOUDTYPE_HOST') or '.cloudtype.app' in os.getenv('ALLOWED_HOSTS', ''))

# helpers
def _env_list(key: str):
    value = os.getenv(key)
    if not value:
        return []
    return [item.strip() for item in value.split(',') if item.strip()]

# 클라우드타입 동적 호스트 감지
def get_allowed_hosts():
    """환경에 따라 ALLOWED_HOSTS 동적으로 설정"""
    hosts = [
        "localhost", "127.0.0.1", 
        "10.124.12.153", "10.124.7.213",  # 문제가 되는 IP들 직접 추가
        "peakdown.site", "www.peakdown.site",  # AWS 프로덕션 도메인
        "43.202.238.159"  # 동적 IP
    ]
    
    # 환경변수에서 명시적으로 설정된 호스트들
    env_hosts = _env_list('ALLOWED_HOSTS')
    if env_hosts:
        hosts.extend(env_hosts)
    
    # 클라우드타입 환경 감지
    cloudtype_host = os.getenv('CLOUDTYPE_HOST')
    if cloudtype_host:
        hosts.append(cloudtype_host)
    
    # 클라우드타입 패턴 호스트 추가
    cloudtype_patterns = [
        '.cloudtype.app',
        '.cloudtype.io', 
        '.port0.org'
    ]
    hosts.extend(cloudtype_patterns)
    
    # 구체적인 Cloudtype 도메인 추가
    specific_cloudtype_hosts = [
        'port-0-baekend-me5uuo8u902e71f2.sel5.cloudtype.app',
        '*.sel5.cloudtype.app',  # sel5 클러스터의 모든 서브도메인
    ]
    hosts.extend(specific_cloudtype_hosts)
    
    # 클라우드타입 환경에서는 내부 IP 주소들도 허용
    if IS_CLOUDTYPE or cloudtype_host or any('.cloudtype.app' in host for host in env_hosts):
        # 특정 내부 IP 주소들 추가
        internal_ips = [
            '0.0.0.0',
            '10.0.0.0',
            '10.124.0.0',
            '10.124.12.0',
            '10.124.7.0',  # 새로운 IP 범위 추가
        ]
        hosts.extend(internal_ips)
        
        # 10.x.x.x 범위의 주요 내부 IP 패턴 허용 (Cloudtype 환경에서)
        # Django는 CIDR을 지원하지 않으므로 주요 IP 패턴들을 명시적으로 추가
        additional_internal_ips = [
            '10.124.0.0',
            '10.124.1.0',
            '10.124.2.0',
            '10.124.3.0',
            '10.124.4.0',
            '10.124.5.0',
            '10.124.6.0',
            '10.124.7.0',
            '10.124.8.0',
            '10.124.9.0',
            '10.124.10.0',
            '10.124.11.0',
            '10.124.12.0',
            '10.124.13.0',
            '10.124.14.0',
            '10.124.15.0',
        ]
        hosts.extend(additional_internal_ips)
    
    # Cloudtype 환경에서는 모든 내부 IP 허용 (필요시)
    if IS_CLOUDTYPE or cloudtype_host or any('.cloudtype.app' in host for host in env_hosts):
        # Cloudtype 환경에서 모든 내부 IP 허용 옵션
        allow_all_internal = os.getenv('ALLOW_ALL_INTERNAL_IPS', 'false').lower() == 'true'
        if allow_all_internal:
            return ["*"]
    
    # 프로덕션 환경에서는 모든 호스트 허용 (임시)
    if not DEBUG and not env_hosts:
        return ["*"]
    
    return hosts

ALLOWED_HOSTS = get_allowed_hosts()


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',
    'corsheaders',
    'users',
    'profiles',
    'trips',
    'rewards',
    'merchants',
    'common',
    'integrations',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# MySQL 설정은 주석 처리 (로컬 개발용)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.getenv('DB_NAME', 'mysql'),
#         'USER': os.getenv('DB_USER', 'root'),
#         'PASSWORD': os.getenv('DB_PASSWORD'),
#         'HOST': os.getenv('DB_HOST', 'localhost'),
#         'PORT': os.getenv('DB_PORT', '3306'),
#         'OPTIONS': {
#             'charset': 'utf8mb4',
#         },
#     }
# }

# MySQL 설정 (프로덕션용)
import pymysql

pymysql.install_as_MySQLdb()
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'), # DB(스키마) 이름
        'USER': os.getenv('DB_USER'), # 유저 이름 (root)
        'PASSWORD': os.getenv('DB_PASSWORD'), # DB 비밀번호
        'HOST': os.getenv('DB_HOST'), # DB 엔드포인트
        'PORT': 3306,
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 커스텀 User 모델
AUTH_USER_MODEL = 'users.User'

# REST Framework 설정
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Spectacular 설정 (API 문서화)
SPECTACULAR_SETTINGS = {
    'TITLE': 'Baekend API',
    'DESCRIPTION': 'AI 기반 여행 추천 및 제휴 상점 서비스 API',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SCHEMA_PATH_PREFIX': '/api/',
}

# JWT 설정
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}

# CORS 설정 - 동적 호스트 지원
def get_cors_allowed_origins():
    """환경에 따라 CORS_ALLOWED_ORIGINS 동적으로 설정"""
    origins = [
        # 프론트엔드 개발 환경 (로컬)
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "https://localhost:3000",
        "http://localhost:5173",  # Vite 기본 포트
        "http://localhost:8080",  # Vue CLI 기본 포트
        "http://localhost:4200",  # Angular 기본 포트
        
        # 백엔드 프로덕션 도메인
        "https://peakdown.site",  # AWS 프로덕션 도메인
        "https://www.peakdown.site",  # www 서브도메인
        
        # 프론트엔드 배포 도메인
        "https://www.peakdown.site",       # www 서브도메인 (프론트엔드)
        "https://frontend.peakdown.site",  # 프론트엔드 서브도메인
        "https://app.peakdown.site",       # 앱 서브도메인
        "https://peakdown-app.vercel.app", # Vercel 배포
        "https://peakdown-app.netlify.app", # Netlify 배포
    ]
    
    # 환경변수에서 명시적으로 설정된 CORS origins
    env_origins = _env_list('CORS_ALLOWED_ORIGINS')
    if env_origins:
        origins.extend(env_origins)
    
    # 클라우드타입 배포 URL 자동 감지
    cloudtype_host = os.getenv('CLOUDTYPE_HOST')
    if cloudtype_host:
        origins.extend([
            f"https://{cloudtype_host}",
            f"http://{cloudtype_host}"
        ])
    
    # 현재 호스트 기반 CORS 설정
    current_host = os.getenv('HOST') or os.getenv('HOSTNAME')
    if current_host:
        origins.extend([
            f"https://{current_host}",
            f"http://{current_host}"
        ])
    
    return origins

# CORS 설정 - 모든 origin 허용 (개발/테스트 단계)
CORS_ALLOW_ALL_ORIGINS = True  # 모든 origin 허용
# CORS_ALLOWED_ORIGINS = get_cors_allowed_origins()  # 주석처리

# 로컬 개발 전역 허용(모든 포트/사설 IP) - 프론트가 다양한 포트를 쓸 때 대비
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^http://localhost(:\d+)?$",
    r"^https://localhost(:\d+)?$",
    r"^http://127\.0\.0\.1(:\d+)?$",
    r"^https://127\.0\.0\.1(:\d+)?$",
    r"^http://192\.168\.(?:\d{1,3})\.(?:\d{1,3})(:?\d+)?$",
]

# 추가 CORS 설정 (확실하게)
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'accept-language',
    'authorization',
    'cache-control',
    'content-type',
    'content-disposition',
    'dnt',
    'origin',
    'pragma',
    'referer',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-forwarded-for',
    'x-forwarded-proto',
    'x-real-ip',
    # Chromium 계열 브라우저가 보내는 Client Hints 헤더
    'sec-ch-ua',
    'sec-ch-ua-mobile',
    'sec-ch-ua-platform',
]

CORS_ALLOW_CREDENTIALS = True

# CORS 추가 설정
CORS_EXPOSE_HEADERS = [
    'content-type',
    'content-length',
    'content-disposition',
]

# CORS 프리플라이트 요청 캐시 시간 (초)
CORS_PREFLIGHT_MAX_AGE = 86400

# CORS 디버깅 활성화 (개발 환경에서만)
if DEBUG:
    CORS_URLS_REGEX = r'^.*$'  # 모든 URL에 대해 CORS 적용

# CSRF 신뢰 도메인 - 동적 설정
def get_csrf_trusted_origins():
    """환경에 따라 CSRF_TRUSTED_ORIGINS 동적으로 설정"""
    origins = []
    
    # 로컬 프론트엔드 개발 오리진 추가 (세션/쿠키 사용 시 필요)
    local_dev_origins = [
        "http://localhost:3000",
        "https://localhost:3000",
        "http://127.0.0.1:3000",
        "https://127.0.0.1:3000",
        "http://localhost:5173",
        "http://localhost:8080",
        "http://localhost:4200",
    ]
    origins.extend(local_dev_origins)
    
    # 환경변수에서 명시적으로 설정된 CSRF trusted origins
    env_origins = _env_list('CSRF_TRUSTED_ORIGINS')
    if env_origins:
        origins.extend(env_origins)
    
    # 클라우드타입 호스트 자동 추가
    cloudtype_host = os.getenv('CLOUDTYPE_HOST')
    if cloudtype_host:
        origins.extend([
            f"https://{cloudtype_host}",
            f"http://{cloudtype_host}"
        ])
    
    # 현재 호스트 기반 CSRF 설정
    current_host = os.getenv('HOST') or os.getenv('HOSTNAME')
    if current_host:
        origins.extend([
            f"https://{current_host}",
            f"http://{current_host}"
        ])
    
    # 기본 클라우드타입 패턴들
    allowed_hosts = ALLOWED_HOSTS
    for host in allowed_hosts:
        if host.startswith('.'):
            # 와일드카드 도메인 패턴
            origins.extend([
                f"https://*{host}",
                f"http://*{host}"
            ])
        elif host not in ['*', 'localhost', '127.0.0.1']:
            origins.extend([
                f"https://{host}",
                f"http://{host}"
            ])
    
    return list(set(origins))  # 중복 제거

CSRF_TRUSTED_ORIGINS = get_csrf_trusted_origins()

# API Keys - Environment Variables Required
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
if not OPENAI_API_KEY:
    print("Warning: OPENAI_API_KEY not found in environment variables")

KAKAO_API_KEY = os.getenv('KAKAO_API_KEY')
if not KAKAO_API_KEY:
    print("Warning: KAKAO_API_KEY not found in environment variables")

# TMAP Open API Key
TMAP_APP_KEY = os.getenv('TMAP_APP_KEY')
if not TMAP_APP_KEY:
    print("Warning: TMAP_APP_KEY not found in environment variables")

# Congestion Buckets - 시간대별 혼잡도 구분 (2시간 최적화용)
CONGESTION_BUCKETS = {
    'T0': {'start': '06:00', 'end': '09:00', 'name': '오전 시간대'},
    'T1': {'start': '09:00', 'end': '12:00', 'name': '오전 늦은 시간'},
    'T2': {'start': '12:00', 'end': '15:00', 'name': '점심 시간대'},
    'T3': {'start': '15:00', 'end': '18:00', 'name': '오후 시간대'},
    'T4': {'start': '18:00', 'end': '21:00', 'name': '저녁 시간대'},
    'T5': {'start': '21:00', 'end': '24:00', 'name': '밤 시간대'},
    'T6': {'start': '00:00', 'end': '06:00', 'name': '새벽 시간대'},
}

try:
    from .local_settings import *
except ImportError:
    pass